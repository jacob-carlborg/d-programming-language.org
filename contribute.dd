Ddoc

$(D_S Contribute,
	$(SECTION3 Quick links,
		$(UL
			$(LI Compile the compiler, runtime and standard library)
		)
	)

	$(P
		This page contains instructions for contributing to the D programming language,
		including all tools shipped with the reference implementation.
	)

	$(P
		Regardless of what you want to contribute to you need to install the
		reference compiler, runtime and standard library.
	)

	$(SECTION3 Conventions,
	  In this page the following conventions are used:
	  $(UL
	    $(LI 
	      "Posix" is considered to be FreeBSD, Linux, Mac OS X and basically any
	      operating system other than Windows
	    )

      $(LI
        $(I $(VAR var)) is used to indicate a piece of text shat should be replaced. Do not use it
        as it literarily stands
      )

      $(LI
        A dollar sign, $, indicates that a command should be run in a terminal. The dollar
        sign is itself not part of the command and should not be typed
      )

			$(LI
				All local paths are written for Posix. To make the paths work on Windows
				you generally just need to replace all slashes (/) with a backslash (\)
			)
	  )
	)

	$(P
		The source code of D and its tools are hosted as the
		$(LINK2 https://github.com/D-Programming-Language, D-Programming-Language)
		organization at github. The organization currently contains six repositories:

		$(UL
			$(LI
				The reference compiler - 
				$(LINK2 https://github.com/D-Programming-Language/dmd, dmd)
			)

			$(LI
				The runtime library - 
				$(LINK2 https://github.com/D-Programming-Language/druntime, druntime)
			)

			$(LI
				The standard library - 
				$(LINK2 https://github.com/D-Programming-Language/phobos, phobos)
			)

			$(LI
				The dlang.org website (formerly known as d-programming-language.org) - 
				$(LINK2 https://github.com/D-Programming-Language/d-programming-language.org, d-programming-language.org)
			)

			$(LI
				Installers for the reference compiler - 
				$(LINK2 https://github.com/D-Programming-Language/installer, installer)
			)

			$(LI
				Various other related tools (here is the location of rdmd) - 
				$(LINK2 https://github.com/D-Programming-Language/tools, tools)
			)
		)
	)

	$(SECTION2 Overview,
		$(OL
			$(LI Install the $(LINK2 #prerequisites, prerequisites))
			$(LI Fork the DMD, druntime and Phobos repositories)
			$(LI Clone the newly forked repositories)
			$(LI Compile DMD, druntime and Phobos using Make)
			$(LI Setup a dmd.conf/ini file)
			$(LI Run the tests for the project to be worked on)
			$(LI Create and checkout a new git branch for the changes to be made)
			$(LI Make the changes)
			$(LI Commit the changes)
			$(LI Rerun the tests to make sure the changes didn't break anything)
			$(LI Rebase the latest changes from the master branch)
			$(LI Push the newly created branch to your fork at github)
			$(LI Create a pull request on the newly pushed branch from your fork at github)
			$(LI Wait for the changes you get merged upstream)
		)
	)

	$(SECTION2 $(ANCHOR prerequisites, Prerequisites),
		$(UL
			$(LI $(LINK2 http://git-scm.com/, git))
			$(LI Account on $(LINK2 https://github.com/, github))
			$(LI $(LINK2 http://www.gnu.org/software/make/, Make))
			$(LI The C++ system compiler (see platform specific prerequisites below))
		)

		$(SECTION3 $(ANCHOR prerequisites_posix, Posix:),
			$(UL
				$(LI $(LINK2 http://gcc.gnu.org, GCC))
			)
		)

		$(SECTION3 $(ANCHOR prerequisites_windows, Windows:),
			$(UL
				$(LI $(LINK2 http://www.digitalmars.com/download/freecompiler.html, Digital Mars C/C++ Compiler))
			)
		)
	)

	$(SECTION2 $(ANCHOR detailed_instructions, Detailed Instructions),
		$(SECTION3 $(ANCHOR detailed_instructions_prerequisites, Prerequisites),
			$(OL
				$(LI Install the $(LINK2 #prerequisites, prerequisites))
			)

			$(SECTION4 $(ANCHOR detailed_instructions_prerequisites_osx, Mac OS X:),
				$(P
					On Mac OS X GCC is currently only supported. Either install the complete
					developer environment, that is Xcode and all the SDKs. Or install just the
					Command Line Tools. Either way, the command line tools need to be
					installed. If installing Xcode, the command line tools should be installed
					from inside Xcode. Do this by:

          $(OL
            $(LI Select the menu Xcode -> Preferences)
            $(LI Select Downloads -> Components)
            $(LI Click Install next to Command Line Tools)
          )
				)

				$(P
					To download Xcode or the Command Line Tools a free Apple ID is required.
				)

				$(UL
					$(LI $(LINK2 https://developer.apple.com/xcode, Xcode))
					$(LI $(LINK2 https://developer.apple.com/downloads/index.action, Command Line Tools))
				)
			)
			
			$(SECTION4 $(ANCHOR detailed_instructions_prerequisites_windows, Windows:),
				$(OL
					$(LI Download the $(LINK2 http://www.digitalmars.com/download/freecompiler.html, C++ compiler))
					$(LI Extract the newly downloaded archive)

					$(LI 
					  Place the newly extracted folder in an appropriate directory $(VAR path), without any 
					  spaces in the path, this is really important
					)

					$(LI
						Add the $(VAR path)\dm\bin directory to the PATH environment variable
					)
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_fork_repositories, Fork the Repositories),
			$(OL
				$(LI Make sure you are logged in with your $(LINK2 https://github.com, github) account)

				$(LI
					Open the $(LINK2 https://github.com/D-Programming-Language/dmd, DMD repository)
					at github
				)

				$(LI
					Press the $(LINK2 https://github.com/D-Programming-Language/dmd/fork_select, Fork)
				 	button in the upper right corner. After a few seconds you should have
					been redirected to your newly created fork
				)

				$(LI
					Do the same to fork $(LINK2 https://github.com/D-Programming-Language/druntime, druntime)
					and $(LINK2 https://github.com/D-Programming-Language/phobos, Phobos)
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_clone_repositories, Clone the Repositories),
			$(OL
				$(LI
					Create a new directory called $(VAR path)/dlang (on Windows without
					any spaces)
				)

				$(LI 
					In $(VAR path)/dlang clone your own fork of DMD by running:
					$(D_CODE $ git clone git@github.com:$(VAR github_account_name)/dmd.git)
				)
	
				$(LI
					Now clone the Phobos and druntime repositories as well:
					$(D_CODE $ git clone git@github.com:$(VAR github_account_name)/phobos.git)
					$(D_CODE $ git clone git@github.com:$(VAR github_account_name)/druntime.git)
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_compile, Compile the Projects),
			$(OL
				$(LI Navigate to $(VAR path)/dlang/dmd/src)

				$(LI Compile DMD by running:
					$(SECTION4 Posix, $(D_CODE $ make -f posix.mak))
					$(SECTION4 Windows, $(D_CODE $ make -f win32.mak))
				)

				$(LI
					Now compile druntime and Phobos with the same command, but in these paths instead:
					$(UL
						$(LI $(VAR path)/dlang/druntime)
						$(LI $(VAR path)/dlang/phobos)
					)
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_config, Configure the Compiler),
			$(OL
				$(LI Navigate to $(VAR path)/dlang/dmd/src)
				$(LI
					Create a new file with the following content:

					$(SECTION4 Posix - dmd.conf,
						$(D_CODE
[Environment]

DFLAGS=-I%@P%/../../phobos -I%@P%/../../druntime/import -L-L%@P%/../../phobos/generated/$(VAR platform)/release/$(VAR 32|64)
						)
					)

					$(SECTION4 Windows - dmd.ini,
						
					)
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_hello_world, Test the Compiler - Hello World),
			$(OL
				$(LI Navigate to $(VAR path)/dlang/dmd/src)
				$(LI Create a new file, main.d, with the following content:
---
module main;

import std.stdio;

void main ()
{
    writeln("Hello World");
}
---
				)

				$(LI
					Compile the file using this command:

					$(D_CODE
$ ./dmd main.d
					)
				)

				$(LI
					Run the newly built application:

					$(D_CODE
$ ./main
					)
				)

				$(LI It should print "Hello World")
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_testing, Run the Tests),
			$(P
				Before making any changes it's a good idea to run the tests to make
				sure you're not breaking anything. In a perfect world every test would
				always pass, but it happens from time to time that some test(s) will fail.
				Therefore it's a good idea to know if your changes caused the test(s) to
				fail or not.
			)

			$(P
				Depending on what project you want to make changes to you should try to
				always test the project you change and any project that it depends on.
				That means, for example, that both druntime and Phobos depend on
				changes made to DMD. But DMD will have no dependencies made on Phobos.
				druntime and DMD is a special case since they both are tightly integrated
				and depend on each other.
			)

			$(OL
				$(LI Navigate to repository you want to make changes to)
				$(LI 
					Run the tests by running:
					$(SECTION4 DMD,
						In the path $(VAR path)/dlang/dmd/test
						$(D_CODE make)
					)

					$(SECTION4 druntime and Phobos,
						$(D_CODE make -f $(VAR platform).mak unittest)
					)
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_changes, Make the Changes),
			$(OL
				$(LI Navigate to project you want to make changes to)

				$(LI
					Create and checkout a new git branch by running:
					$(D_CODE $ git checkout -b $(VAR branch_name))
				)

				$(LI Make your changes)

				$(LI
					Commit the changes:
					$(D_CODE $ git commit -a -m "commit message")
				)

				$(LI
					Rerun the tests (see $(LINK2 #detailed_instructions_testing, Run the Tests))
					and make sure all tests that passed before still pass.
				)

				$(LI
					Push the changes to your fork at github:
					$(D_CODE $ git push origin $(VAR branch_name))
				)
			)
		)

		$(SECTION3 $(ANCHOR detailed_instructions_pull_request, Create a Pull Request),
			$(OL
				$(LI
					Navigate to your fork at github for the repository you just made the
					changes to
				)

				$(LI
					Switch to the branch you made the changes to by clicking the
					"branch" button to the left and select $(VAR branch_name)
				)

				$(LI
					Click the "Pull Request" button the the top
				)

				$(LI Enter the title of the pull request and a comment)
				$(LI Click "Send pull request" to make the pull request)
			)
		)
	)
)